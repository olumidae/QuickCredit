{"version":3,"sources":["../../server/controllers/repaymentController.js"],"names":["dotenv","config","secret","process","env","repaymentsController","getAllRepayments","req","res","repaymentsModel","repayments","length","status","json","error","data","repayLoan","body","details","message","id","params","loanTorepay","loanModel","loans","find","loan","Number","repaid","newrepayloan","newLoan","loanId","createdOn","format","token","webtoken","sign","sub","repaymentsHistory","myrepayments"],"mappings":"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","file":"repaymentController.js","sourcesContent":["import webtoken from 'jsonwebtoken';\nimport moment from 'moment';\nimport dotenv from 'dotenv';\nimport loanModel from '../models/loanModel';\nimport repaymentsModel from '../models/repaymentModel';\nimport repaymentValidator from '../utils/authenticateRepayment';\n\ndotenv.config();\nconst { secret } = process.env;\n\nconst repaymentsController = {\n  getAllRepayments: (req, res) => {\n    if (!repaymentsModel.repayments.length) {\n      return res.status(404).json({ status: 404, error: 'No repayments(s) found' });\n    }\n\n    return res.status(200).json({ status: 200, data: repaymentsModel.repayments });\n  },\n\n  repayLoan: (req, res) => {\n    // Validating\n    // admin to post loan repayment\n    const { error } = repaymentValidator(req.body);\n\n    if (error) {\n      return res.status(400).json({ status: 400, error: error.details[0].message });\n    }\n\n    const { id } = req.params;\n    const loanTorepay = loanModel.loans.find(loan => loan.id === Number(id) && loan.repaid !== 'true');\n\n    if (!loanTorepay) {\n      return res.status(400).json({ status: 400, error: 'The specified unrepaid loan is not found !!' });\n    }\n\n    let newrepayloan = repaymentsModel.repayments.find(newLoan => newLoan.loanId === req.body.loanId && newLoan.createdOn === moment().format('LL'));\n\n    if (newrepayloan) {\n      return res.status(400).json({ status: 400, error: 'This installment is already recorded' });\n    }\n\n    newrepayloan = repaymentsModel.repayLoan(req.body, res);\n\n    const token = webtoken.sign({ sub: newrepayloan.id }, secret);\n    return res.status(201).json({ status: 201, message: 'The loan repayment was successfully recorded', data: newrepayloan, token });\n  },\n\n\n  repaymentsHistory: (req, res) => {\n    const myrepayments = repaymentsModel.repayments.find(loan => loan.loanId === req.params.loanId);\n\n    if (!myrepayments) {\n      return res.status(404).json({ status: 404, error: `No repayments for the loan  ${req.params.loanId} found` });\n    }\n\n    return res.status(200).json({ status: 200, data: myrepayments });\n  },\n\n};\nexport default repaymentsController;\n"]}