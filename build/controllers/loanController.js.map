{"version":3,"sources":["../../server/controllers/loanController.js"],"names":["dotenv","config","secret","process","env","loanController","getAllLoans","req","res","loanModel","loans","length","status","json","error","query","repaid","unpaidLoans","filter","unpaid","data","message","repaidLoan","paid","applyForLoan","authenticateLoan","applyValidator","body","details","newloan","find","loan","user","loansListByStatus","verifyLoan","params","approveLoan","approveValidator","pendingLoan","token","webtoken","sign","sub","id","getSpecificLoan","getLoanById","Number"],"mappings":"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","file":"loanController.js","sourcesContent":["import webtoken from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport userModel from '../models/userModel';\nimport loanModel from '../models/loanModel';\nimport authenticateLoan from '../utils/authenticateLoan';\n\ndotenv.config();\nconst { secret } = process.env;\n\nconst loanController = {\n  getAllLoans: (req, res) => {\n    if (!loanModel.loans.length) {\n      return res.status(404).json({ status: 404, error: 'No loan found' });\n    }\n\n    const { status, repaid } = req.query;\n    if (status === 'approved' && repaid === 'false') {\n      const unpaidLoans = loanModel.loans.filter(unpaid => unpaid.status === 'approved' && unpaid.repaid === 'false');\n      if (unpaidLoans.length > 0) {\n        return res.status(200).json({ status: 200, data: unpaidLoans });\n      }\n      return res.status(404).json({ status: 404, message: 'there are no unpaid loans' });\n    }\n\n    if (status === 'approved' && repaid === 'true') {\n      const repaidLoan = loanModel.loans.filter(paid => paid.status === 'aprroved' && paid.repaid === 'true');\n      return res.status(200).json({ status: 200, data: repaidLoan });\n    }\n\n    return res.status(200).json({ status: 200, data: loanModel.loans });\n  },\n\n  // worked 14/5/19\n  applyForLoan: (req, res) => {\n    // Validating\n    const { error } = authenticateLoan.applyValidator(req.body);\n\n    if (error) {\n      return res.status(400).json({ status: 400, error: error.details[0].message });\n    }\n\n    // const isloggedin = userModel.UserData.find(user => user.email === req.body.user && user.isLoggedIn === 'true' && user.isAdmin === 'false');\n    // if (!isloggedin) return res.status(400).json({ status: 400, error: 'You must  be logged in to request a loan' });\n\n    // const isVerified = userModel.UserData.find(user => user.email === req.body.user && user.status === 'verified');\n    // if (!isVerified) return res.status(400).json({ status: 400, error: 'You are not allowed to request a loan, your account is not verified' });\n\n    let newloan = loanModel.loans.find(loan => loan.user === req.body.user && loan.repaid !== 'true');\n\n    if (newloan) {\n      return res.status(400).json({ status: 400, error: 'Dear client, you have an unrepaid loan!' });\n    }\n\n    newloan = loanModel.applyForLoan(req.body);\n    // const token = webtoken.sign({ sub: newloan.id }, config.secret);\n    return res.status(201).json({\n      status: 201, message: 'The loan request was successful', data: newloan, /** token */\n    });\n  },\n\n  loansListByStatus: (req, res) => {\n    const verifyLoan = loanModel.loans.find(loan => loan.status === req.params.status);\n\n    if (!verifyLoan) {\n      return res.status(404).json({ status: 404, error: `No ${req.params.status} loan(s) found` });\n    }\n\n    return res.status(200).json({ status: 200, data: verifyLoan });\n  },\n\n  approveLoan: (req, res) => {\n    // validate data\n    const { error } = authenticateLoan.approveValidator(req.body);\n    if (error) {\n      return res.status(400).json({ status: 400, error: error.details[0].message });\n    }\n\n    // const isloggedAsAdmin = userModel.users.find(user => user.email === req.body.approvedBy && user.isLoggedIn === 'true' && user.isAdmin === 'true');\n    // if (!isloggedAsAdmin) {\n    //   return res.status(400).json({ status: 400, error: 'You are not allowed to approve the loan request. Log in as Admin' });\n    // }\n\n    let pendingLoan = loanModel.loans.find(loan => loan.user === req.params.user && loan.status === 'pending');\n    if (!pendingLoan) return res.status(404).json({ status: 404, error: 'The are no pending loan requests' });\n\n    pendingLoan.status = req.body.status;\n\n    // return update\n\n    pendingLoan = loanModel.loans.find(loan => loan.user === req.params.user);\n\n    const token = webtoken.sign({ sub: pendingLoan.id }, secret);\n    return res.status(200).json({ status: 200, message: 'User marked as verified', data: pendingLoan, token,\n    });\n  },\n\n  getSpecificLoan: (req, res) => {\n    const { id } = req.params;\n    const getLoanById = loanModel.loans.find(loan => loan.id === Number(id));\n\n    if (!getLoanById) {\n      return res.status(404).json({ status: 404, error: 'Loan does not exist' });\n    }\n\n    return res.status(200).json({ status: 200, data: getLoanById });\n  },\n\n};\nexport default loanController;\n"]}