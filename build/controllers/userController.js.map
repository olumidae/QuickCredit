{"version":3,"sources":["../../server/controllers/userController.js"],"names":["dotenv","config","secret","process","env","UserController","getAllUsers","req","res","userModel","UserData","length","status","json","error","data","signUp","authenticateUser","signupValidator","body","details","message","signupUser","find","user","email","token","webtoken","sign","sub","id","verifyUser","verifyUserValidator","updateUser","params","logIn","UserLoginValidator","slice","loggeduser","comparePasswords","bcrypt","compareSync","password","isLoggedIn"],"mappings":"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","file":"userController.js","sourcesContent":["import webtoken from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\nimport userModel from '../models/userModel';\nimport authenticateUser from '../utils/authenticateUser';\n\ndotenv.config();\n\nconst { secret } = process.env;\n\nconst UserController = {\n  getAllUsers: (req, res) => {\n    if (!userModel.UserData.length) {\n      return res.status(404).json({ status: 404, error: 'No user(s) found' });\n    }\n\n    return res.status(200).json({ status: 200, data: userModel.UserData });\n  },\n\n  signUp: (req, res) => {\n    const { error } = authenticateUser.signupValidator(req.body);\n\n    if (error) {\n      return res.status(400).json({ status: 400, error: error.details[0].message });\n    }\n\n    let signupUser = userModel.UserData.find(user => user.email === req.body.email);\n\n    if (signupUser) {\n      return res.status(400).json({ status: 400, error: 'This email has been registered!' });\n    }\n\n    signupUser = userModel.signUp(req.body);\n\n    const token = webtoken.sign({ sub: signupUser.id }, secret);\n    res.status(201).json({\n      status: 201, message: 'Successfully registered', data: signupUser, token,\n    });\n  },\n\n  verifyUser: (req, res) => {\n    // validate data\n    const { error } = authenticateUser.verifyUserValidator(req.body);\n    if (error) {\n      return res.status(400).json({ status: 400, error: error.details[0].message });\n    }\n\n    // const isloggedAsAdmin = userModel.UserData.find(user => user.email === req.body.verifiedBy && user.isLoggedIn === 'true' && user.isAdmin === 'true');\n    // if (!isloggedAsAdmin) {\n    //   return res.status(400).json({ status: 400, error: 'You are not allowed to verify the clients user account. Log in as Admin' });\n    // }\n\n    // Check if user exists\n    let updateUser = userModel.UserData.find(user => user.email === req.params.email);\n    if (!updateUser) {\n      return res\n        .status(404)\n        .json({ status: 404, error: 'The user does not exist' });\n    }\n\n    if (updateUser\n      .status === 'verified') {\n      return res\n        .status(400)\n        .json({\n          status: 400,\n          error: 'The user already marked as verified',\n        });\n    }\n\n    updateUser.status = req.body.status;\n\n    // return update\n\n    updateUser = userModel.UserData.find(user => user.email === req.params.email);\n\n    const token = webtoken.sign({ sub: updateUser.id }, secret);\n    res.status(200).json({\n      status: 200,\n      message: 'User marked as verified',\n      data: updateUser,\n      token,\n    });\n  },\n\n  logIn: (req, res) => {\n    // Validating\n    const { error } = authenticateUser.UserLoginValidator(req.body);\n    if (error) {\n      return res.status(400).json({ status: 400, error: error.details[0].message.slice(0, 70) });\n    }\n\n    // Check email\n    const loggeduser = userModel.UserData.find(user => user.email === req.body.email);\n    if (!loggeduser) {\n      res.status(400).json({ status: 400, error: 'Email and/or password is incorrect' });\n    }\n    // password\n    else {\n      const comparePasswords = bcrypt.compareSync(req.body.password, loggeduser.password);\n      if (!comparePasswords) {\n        return res.status(400).json({ status: 400, error: 'Email and/or password is incorrect' });\n      }\n\n      // Generate token\n      const token = webtoken.sign({ sub: loggeduser.id }, secret);\n      // user isloggedIn\n      loggeduser.isLoggedIn = 'true';\n      return res.status(200).json({ status: 200, message: 'Logged In Successfully', data: loggeduser, token });\n    }\n  },\n\n};\n\nexport default UserController;\n"]}